// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User для хранения информации о пользователях, включая их имя, электронную почту, пароль и связи с корзиной и заказами.
model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  cart      Cart?
  orders    Order[]
  cartItems CartItem[] 
}

// Product для хранения информации о товарах, включая название, описание, цену, изображение и связи с корзиной и заказами.
model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Float
  image       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  cartItems   CartItem[]
  orders      Order[]
  carts       Cart[]
}

// Cart для хранения информации о корзине, включая связь с пользователем и корзинными элементами.
model Cart {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  cartItems CartItem[]
  products  Product[]
}

// CartItem для хранения информации о товарах в корзине, включая количество, связь с пользователем и товаром.
model CartItem {
  id         Int      @id @default(autoincrement())
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  carts      Cart[]   
}

// Order для хранения информации о заказах, включая связь с пользователем и товаром.
model Order {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id])
  userId     Int
  product    Product    @relation(fields: [productId], references: [id])
  productId  Int
}